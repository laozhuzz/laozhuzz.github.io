<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 老猪的小屋</title>
    <link>/categories/python/</link>
    <description>Recent content in Python on 老猪的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jul 2018 17:21:57 +0800</lastBuildDate>
    
	<atom:link href="/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>游戏服务器自动化测试实践</title>
      <link>/posts/server_auto_testing_practice/</link>
      <pubDate>Tue, 31 Jul 2018 17:21:57 +0800</pubDate>
      
      <guid>/posts/server_auto_testing_practice/</guid>
      <description>1、背景 游戏服务器不稳定是我们服务器人的最大焦虑点.
如何保证游戏服务器的稳定性?
设计执行一个相对完善的测试方案是解决焦虑最重要的步骤.
通过什么样的测试方案可以让我们服务器人稍微放松一些?
如果玩家的任何输入, 服务器都已经测试过千百遍, 那这样我们就有自信多了.
2. 测试方案设计 我们一开始考虑的是一个完备的测试用例集, 一个覆盖所有可能玩家输入的测试用例集.
但是完备的测试用例不具备可执行性(比如一个int值, 如何测试完备?).
我们需要在完备和可执行性之间取平衡? 标准是什么?
最终我们决定测试用例集的标准是服务器上所有分支的覆盖.
玩家的一个输入, 所有可能到达的分支都需要覆盖到.
(执行中目前我们的分支覆盖率是要求从消息处理接口开始, 两次函数调用内的分支都需要覆盖到.)
3. 测试工具选择 测试用例跟游戏逻辑紧耦合, 大部分情况下需要根据不同状态进行不同选择, 目前没有找到贴合的工具.
测试工具只有我们自己撸了.
4. 测试工具设计 测试工具分了3个层次: - 逻辑控制层, 包括底层通信, 消息流转 - 玩家数据层 - 测试消息层
在设计工具时候, 我们优先考虑的是测试工具的易用性.
在使用本工具时候, 只需要设计测试消息, 关注返回数据是否符合预期即可.
逻辑层和数据层不用关心.
比如下图展示了 战斗匹配的一个测试用例:
玩家当前禁止战斗匹配中, 需要返回正确的错误码.
对应覆盖服务器代码中的分支:
执行结果如下:
更多的 战斗匹配的测试用例, 分别对应上面服务器代码分支: 最终展示所有用例的统计:
这样, 在新增一个功能后, 只需要在test case中增加对应消息就可以.
很多时候, 我们需要做一些甚至很多额外的工作, 仅仅是为了覆盖到某个分支.
但这是值得的. 我们现在做的额外工作, 在未来将一直发挥作用(回归测试), 保证服务器的稳定.
5. 自动化测试 将测试工具加入到ci工具链中, 每次发现版本有变化都跑测试工具.</description>
    </item>
    
  </channel>
</rss>